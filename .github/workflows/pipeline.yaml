name: Song service pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test solution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Setup testing database
      run: docker run -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres
    - name: Setup Entity Framework tool
      run: dotnet tool install --global dotnet-ef
    - name: Run migrations
      run: dotnet ef database update --project SongService
    - name: Run tests
      run: dotnet test --no-build --verbosity normal

  analyze:
    name: Static code analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v2.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  vulnerability-scan:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=SongService.sln
  
  deploy:
    name: Deployment
    needs: [test, analyze, vulnerability-scan]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v2
      with:
        login-server: respotify.azurecr.io
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}
    - name: Build docker image
      run: docker build SongService/ -t respotify.azurecr.io/song-service
    - name: Deploy
      run: docker push respotify.azurecr.io/song-service

  update-service:
    name: Restart service
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Azure Login
        uses: Azure/login@v2.1.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_CLUSTER_NAME }} --overwrite-existing
      - name: Restart deployment
        run: kubectl rollout restart deployment/song-service
        continue-on-error: true # If aks cluster is not available, the pipeline should not fail
